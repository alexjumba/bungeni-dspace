<html>
<head>
<style type="text/css">
.activity{
    display: block;
  }
#sample-menu a.x-tree-node-anchor{
  text-align: left;
  padding: 0px;
  display: inline;
}
</style>
<!-- <script type="text/javascript" src="RowExpander.js"></script> -->
<script type="text/javascript">
//Ext.Msg.alert('Status', 'Just testing...');


Ext.QuickTips.init();
var gridindex;

// create the Data Store
var store = new Ext.data.JsonStore({
    root: 'topics',
    totalProperty: 'totalCount',
    //idProperty: 'threadid',
    remoteSort: true,
//    url: 'index.do',
    baseParams: {
        method:   'get'
    },
//id:'id',

    fields: [
        'title', 'forumtitle', 'forumid', 'author',
        {name: 'replycount', type: 'int'},
        {name: 'lastpost', mapping: 'lastpost', type: 'date', dateFormat: 'timestamp'},
        'lastposter', 'excerpt'
    ],

    // load using script tags for cross domain, if the data in on the same domain as
    // this page, an HttpProxy would be better
    proxy: new Ext.data.ScriptTagProxy({
        url: 'http://extjs.com/forum/topics-browse-remote.php'
    })
});
store.setDefaultSort('lastpost', 'desc');




// pluggable renders
function renderTopic(value, p, record){
    return String.format(
            '<b><a href="http://extjs.com/forum/showthread.php?t={2}" target="_blank">{0}</a></b><a href="http://alex.com/forum/forumdisplay.php?f={3}" target="_blank">{1} Forum</a>',
            value, record.data.forumtitle, record.id, record.data.forumid);
}
function renderLast(value, p, r){
    return String.format('{0}<br/>by {1}', value.dateFormat('M j, Y, g:i a'), r.data['lastposter']);
}

var pagingBar = new Ext.PagingToolbar({
    pageSize: 25,
    store: store,
    displayInfo: true,
    displayMsg: 'Displaying records {0} - {1} of {2}',
    emptyMsg: "No records to display",
    
    items:[
        '-', {
        pressed: true,
        enableToggle:true,
        text: 'Show Preview',
        cls: 'x-btn-text-icon details',
        toggleHandler: function(btn, pressed){
            var view = grid.getView();
            view.showPreview = pressed;
            view.refresh();
        }
    }]
});

var grid = new Ext.grid.GridPanel({
    el:'sample-box-inner',
    width:795,
    /*height:500,*/
    title:'Search...',
    store: store,
    trackMouseOver:false,
    disableSelection:true,
    loadMask: true,

    // grid columns
    columns:[{
        id: 'topic', // id assigned so we can apply custom css (e.g. .x-grid-col-topic b { color:#333 })
        header: "Topic",
        dataIndex: 'title',
        width: 420,
        renderer: renderTopic,
        sortable: true
    },{
        header: "Author",
        dataIndex: 'author',
        width: 100,
        hidden: true,
        sortable: true
    },{
        header: "Replies",
        dataIndex: 'replycount',
        width: 70,
        align: 'right',
        sortable: true
    },{
        id: 'last',
        header: "Last Post",
        dataIndex: 'lastpost',
        width: 150,
        renderer: renderLast,
        sortable: true
    }],

    // customize view config
    viewConfig: {
        forceFit:true,
        enableRowBody:true,
        showPreview:true,
        getRowClass : function(record, rowIndex, p, store){
            if(this.showPreview){
		//console.log(record.data);
                p.body = '<p>'+record.data.excerpt+'</p>';
                return 'x-grid3-row-expanded';
            }
            return 'x-grid3-row-collapsed';
        }
    },

    // paging bar on the bottom
    bbar: pagingBar
});

// render it
//grid.render();

// trigger the data store load
//store.load({params:{start:0, limit:25}});






























//console.log(tree_test);
if(/*!Ext.getCmp('treeid')*/tree_test==1){
	tree_test=0;
	/*var */tree = new Ext.tree.ColumnTree({
	    width: 217,
	    height: 300,
	    rootVisible:true,
	    autoScroll:true,
	    //title: 'Collections',
	    renderTo: 'tree0',/*treeid*/
	    enableDD: true,
	    expandable: true,
	    containerScroll: true,
	    autoHeight: true,
	    tbar: [{
	    	text: refresh,
	    	tooltip: refreshTip,
	    	//iconCls: '',
	    	listeners: {
	    		'click': function(){
	    			var selectedItem = tree.getSelectionModel().getSelectedNode();
	    			if(!selectedItem){
	    				selectedItem = tree.getRootNode();
	    			}
	    			if(selectedItem.isLeaf()){
	    				//console.log("is leaf!!");
	    				
	    				media_store.load();
	    			}else{
	    				//console.log("is not leaf");
	    				media_store.load();
	    			}
	    			//console.log(selectedItem);
	    		},
	    		scope: this
	    	}
	    },{
	    	xtype: 'tbseparator'
	    }],
	    
	    columns:[{
	        header:collections,
	        width:183,
	        dataIndex:'name'
	    },{
	        header:'Duration',
	        width:30,
	        dataIndex:'duration'
	    }/*,{
	        header:'Assigned To',
	        width:100,
	        dataIndex:'user'
	    }*/],

	    loader: new Ext.tree.TreeLoader({
	        dataUrl:/*'column-data.json'*/'icollection.do?url='+defaultHome,
	        uiProviders:{
	            'col': Ext.tree.ColumnNodeUI
	        }
	    }),

	    root: new Ext.tree.AsyncTreeNode({
	        text:'Collections'
	    }),
	    
	    listeners: {
	    	'click': function(node, e){
				

				if(node.isLeaf()){
					//console.log("is leaf!!");
					
					//console.log(node.attributes.uri);				
					//console.log(media_grid.getStore());		
					$("#collectionheader").html(" <strong>["+node.attributes.name+"]</strong> ");		
					media_store.load.defer(100, media_store, [{params: {start: 0, loc: node.attributes.uri}}]);
					//console.log(e);
				}else if (node.isRoot){
					media_store.load.defer(100, media_store, [{params: {start: 0, loc: ''}}]);
					$("#collectionheader").html(" <strong>["+"All Library"+"]</strong> ");
				}else{
					//console.log("is not leaf");

					
					//console.log(node.attributes.uri);
					//console.log(media_grid.getStore());
					$("#collectionheader").html(" <strong>["+node.attributes.name+"]</strong> ");
					media_store.load.defer(100, media_store, [{params: {start: 0, loc: node.attributes.uri}}]);
					//console.log(e);
				}

				//console.log(node.attributes.name);
				//$("#collectionheader").html(node.attributes.name);
				//console.log(node);
				//console.log(e);
				e.stopEvent(); //.preventDefault() .stopPropagation()
			},
			scope: this
		}
	});
	//console.log(tree);

	tree1 = new Ext.tree.ColumnTree({
	    width: 217,
	    height: 300,
	    rootVisible:true,
	    autoScroll:true,
	    //title: 'Collections',
	    renderTo: 'tree1',/*treeid*/
	    enableDD: true,
	    expandable: true,
	    containerScroll: true,
	    autoHeight: true,
	    tbar: [{
	    	text: refresh,
	    	tooltip: 'refresh the tree',
	    	//iconCls: '',
	    	listeners: {
	    		'click': function(){
	    			var selectedItem = tree.getSelectionModel().getSelectedNode();
	    			if(!selectedItem){
	    				selectedItem = tree.getRootNode();
	    			}
	    			if(selectedItem.isLeaf()){
	    				//console.log("is leaf!!");
	    				
	    				media_store.load();
	    			}else{
	    				//console.log("is not leaf");
	    				media_store.load();
	    			}
	    			//console.log(selectedItem);
	    		},
	    		scope: this
	    	}
	    },{
	    	xtype: 'tbseparator'
	    }],
	    
	    columns:[{
	        header:collections,
	        width:183,
	        dataIndex:'name'
	    },{
	        header:'Duration',
	        width:30,
	        dataIndex:'duration'
	    }/*,{
	        header:'Assigned To',
	        width:100,
	        dataIndex:'user'
	    }*/],

	    loader: new Ext.tree.TreeLoader({
	        dataUrl:/*'column-data.json'*/'icollection.do?url='+defaultHome,
	        uiProviders:{
	            'col': Ext.tree.ColumnNodeUI
	        }
	    }),

	    root: new Ext.tree.AsyncTreeNode({
	        text:'Collections'
	    }),
	    
	    listeners: {
	    	'click': function(node, e){
				

				if(node.isLeaf()){
					//console.log("is leaf!!");
					
					//console.log(node.attributes.uri);				
					//console.log(media_grid.getStore());				
					media_store.load.defer(100, media_store, [{params: {loc: node.attributes.uri}}]);
					//console.log(e);
				}else{
					//console.log("is not leaf");

					
					//console.log(node.attributes.uri);
					//console.log(media_grid.getStore());
					media_store.load.defer(100, media_store, [{params: {loc: node.attributes.uri}}]);
					//console.log(e);
				}
				//console.log(node);
				e.stopEvent(); //.preventDefault() .stopPropagation()
			},
			scope: this
		}
	});
		
}





$(".bitstreams ul li a").live("click", function(){
	alert("bitstream show");
});



  // row expander
    var expander = new Ext.grid.RowExpander({
        /*tpl : new Ext.Template(
            '<p><b>Title:</b> {title}</p><br>',
            '<p><b>'+description+':</b> {description}</p>',
            '<p><b>Bitstreams [File(s)]:</b></p><br />{bitstreams}'
        )*/
        tpl : new Ext.Template(
            '<p><b>Title:</b> {title}</p><br>',
            '<p><b>'+description+':</b> {description}</p>',
            '<p><b>Bitstreams [File(s)]:</b></p><br />{bitstreams}'

            '<div style="float:left;">',
            '<img title="{title}" type="{url}" class="{collection}" src="../../assets/images/cat/{collection}.jpg" alt="{title}"/>',
'</div><div style="float: left; padding-left: 1em;">',
            '<p><b>'+'English'+':</b> {collection}</p>',
            '<p><b>Bitstreams [File(s)]:</b></p><br />{bitstreams}',
'</div><br style="clear: both;"/>'
        )
    });

var media_store = new Ext.data.JsonStore({
    //url: 'index.do',
	//autoLoad: true,
    root: 'searchResults',
    baseParams: {
        method:   'post',
        type: 'dspace',
        keywords: search_term,
        ////start: 0,
//start: 0,
loc: '',
        pagesize: 20,
        //page: 0,
        rows: 20,
        //start: 0,
		sidx: 'id',
        sord: 'DESC'         
    },
    /*params:{
		start: 0
    },*/
    paramNames:
    {
        start: "start",//"page",    // The parameter name which specifies the start row
        limit: "rows",    // The parameter name which specifies number of rows to return
        sort: "sidx",      // The parameter name which specifies the column to sort on
        //query1: null,query2: null, query3: null, query4: null, query5: null, query6: null, query7: null, loc: null, 
        dir: "sord"		   // The parameter name which specifies the sort direction                
    },
    totalProperty: 'maxResults',
    idProperty: 'url',
    //id: 'url',
    fields: [
        {name: 'id', mapping: 'url'},
        {name: 'issue_date', type: 'date', mapping: 'issue_date', dateFormat: 'Y/m/d'/*'timestamp'*/},
        {name: 'author', type: 'string'},
        {name: 'title', type: 'string'},
        {name: 'url', type: 'string'},
        {name: 'bitstreams', type: 'string'},
        {name: 'collection', type: 'string'},
        {name: 'description', type: 'string', mapping: 'details'}
    ],
  //init order by status
    sortInfo:{field: 'id', direction: "DESC"},
    remoteSort: true,
    proxy: new Ext.data.HttpProxy({
        method: 'POST',
        url: 'index.do'
    }),
    listeners: {
            load: {
                fn: function() {
        			//console.log(this);
        			//console.log(this.reader.jsonData.searchTerms);
        			//console.log(this);
        			$("#resultsheader").html(this.reader.jsonData.searchTerms);
        			//$("#libsearch").value(this.reader.jsonData.searchTerms);
        			//$("#collectionheader").html('in Collection: xyz');
		        	this.each(function(item, index, totalItems ) {
			        		/*var currentDate = new Date();
			        		currentDate.setTime(item.data ['issue_date']);
			        		

			        		
			        		//Ext.Msg.alert('Status', item.data['issue_date']);
			        		item.data['issue_date']=currentDate.toString();//Date.parseDate(currentDate, "Y-m-d");
			        		//Ext.Msg.alert('Status', item.data['issue_date']);
		        			*/
					});
                    //Ext.getCmp('resultsheader').setValue("Sample data");

                    //Ext.getCmp('categoryBox').setValue(categoryId; ?>);
                }
            },
            loadexception : function(This,o, arg,e) {
                //////alert(e.toString());
                ////console.info('resuest failed :-(');
            },
            beforeload: {
				fn: function(obj, options){
            		//console.info("obj", obj);
            		//console.info("options", options);
					//console.info('hi');
					//options.params = {};
					options.params || (options.params = {});
					//console.log(options);					
					/*console.log(options);

					this.cleanParams(options.params);		
					var params = this.buildQuery(this.getFilterData());
					console.log(params);
					Ext.apply(options.params, params);
					
					console.log("onbeforeloooad", options, params);
								
					options.params.rows = 21;*/
					var selectedItem = tree.getSelectionModel().getSelectedNode();
					var handle = null;
					//console.info(handle);
	      			if(selectedItem){
	      				//selectedItem = tree.getRootNode();
	      				if(!selectedItem.isRoot){
							handle = selectedItem.attributes.uri;
		      			}
	      			}
	      			//console.log(selectedItem);
	      			//console.log(gridindex);
	      			//if(gridindex==undefined){
//						gridindex=true;
						//Ext.apply(options.params, {/*wb: wbSelect2.getValue()*//*start: obj.params.start,*/ loc: handle } );
		      		//}else{
//		      			Ext.apply(options.params, {/*wb: wbSelect2.getValue()*/start: obj.params.start, loc: handle } );
			      	//}
	      			//if(initialload){
					//	initialload=false;
					//	console.info(options, handle);
						Ext.apply(options.params, {/*wb: wbSelect2.getValue()*//*start: obj.params.start,*/ loc: handle } );
		      		//}else{
		      		//	console.info(options, handle);
					//	Ext.apply(options.params, {/*wb: wbSelect2.getValue()*/start: obj.params.start, loc: handle } );
			        //}
	      			
	                  //console.log("onbeforeload", options.params);

	                
					
				}
            }            
    }

});
// set the default sorting for the corresponding sql query
media_store.setDefaultSort('id', 'DESC');



var pagingBar2 = new Ext.PagingToolbar({
    pageSize: 20,
    store: media_store,
    displayInfo: true,
    displayMsg: recordsAvailable,
    emptyMsg: recordsUnavailable,
    
    items:[
        '-', {
        pressed: true,
        enableToggle:true,
        text: 'Expand Items',//showPreview,
        cls: 'x-btn-text-icon details',
        toggleHandler: function(btn, pressed){
console.info(btn, pressed);
alert('pressed');
            var view = media_grid.getView();
            view.showPreview = pressed;
            view.refresh();
        }
    }]
});


// loading the actual data from data.php
//media_store.load();


//row expander
/*var expander = new Ext.grid.RowExpander({
    tpl : new Ext.Template(
        '<p><b>Title:</b> {title}</p><br>',
        '<p><b>Description:</b> {description}</p>'
    )
});*/

var action = new Ext.ux.grid.RowActions({
    header:"Actions",
    width:90,
//      hideMode:"display",
    actions:[
       {
          //iconIndex:"edit",
          iconCls:"icon-ob",
          qtip:"Open Item",
          style:'background-color:yellow',
          tooltip:'Open',
          callback:function(grid, records, action, groupId) {
				//Ext.ux.Toast.msg('Callback: icon-add-table', 'Group: <b>{0}</b>, action: <b>{1}</b>, records: <b>{2}</b>', groupId, action, records.length);
				var location = window.location.href;
				//console.log(location);
				//console.log(location.slice(0));
				var splitter = location.split("?");
				//alert(splitter[0]);
				window.open(splitter[0] + '/../redirect.do?url=' + records.json.url, "dspace");
				//console.log(grid);
				//console.log(records);
				//console.log(action);
				//console.log(groupId);
		  }
                  
          //text:"Edit"
       }
    ]
});
//console.log(action);

// defining the layout (columnmodel) of the table (grid) we want to create
var mediaGrid_cm = new Ext.grid.ColumnModel([
        new Ext.grid.RowNumberer({header:'No',width:20}),
        expander,        
        {id:'id', header: 'id', dataIndex: 'id', hidden: true },
    	{id:'issue_date', header: dateIssued, dataIndex: 'issue_date', width: 80, renderer: Ext.util.Format.dateRenderer('M d Y'), locked:false, sortable: true, tooltip:'Date of issue', filter: {xtype:"datefield", filterName: 'dop'} },
        {id:'author', header: author, dataIndex: 'author', width: 120, sortable: true, filter: {xtype:"textfield", filterName:"author"}, tooltip: 'the author(s) of the item'},
        {id:'title', header: title, dataIndex: 'title', width: 200, sortable: true, filter: {xtype:"textfield", filterName: "title"}, tooltip: 'the title of the item'},
        {id:'description', header: description, dataIndex: 'description', width: 230, sortable: true, tooltip:'the description of the item',
            /*filter: {
	            xtype: "combo",
	            mode: "local",
	            store: [["A","Type1"],["B","Type2"]],
	            triggerAction: "all"
	         }*/
        	filter: {xtype:"textfield", filterName: "description"}        
        },action
     ]);
mediaGrid_cm.defaultSortable = true; 


// defining the grid
var media_grid = new Ext.grid.GridPanel({
//title: 'Property Grid',

	xtype: "grid",	
////	el:'sample-box-inner',
        id: 'searchgrid',
        store: media_store,
        cm: mediaGrid_cm,
        viewConfig: {
tpl: new Ext.XTemplate('<div class="hospital-target"></div>'),
            forceFit: true,
            enableRowBody:true,
            showPreview:true,
            getRowClass : function(record, rowIndex, p, store){
alert('getrowclass');
console.info(record, rowIndex, p, store);
			    if(this.showPreview){
				    //console.log(p);
				    //console.log(p.body);
				    //console.log(record);
				    //console.log(record.data);
			        //p.body = '<p>'+record.data.excerpt+'</p>';
			        return 'x-grid3-row-expanded';
			    }
//p.body = this.tpl.apply(rec.data);

			    return 'x-grid3-row-collapsed';
			}
        },
        sm: new Ext.grid.RowSelectionModel({singleSelect:true}),
        enableColLock: true,
        stripeRows: true,
        autoExpandColumn: 'title',
        width:790,
        collapsed: false,
        //height:300,
        frame:false,
        //header: false,
        //title:'Search...',
        trackMouseOver:true,
        disableSelection:true,
        loadMask: true,
     // paging bar on the bottom
        //bbar: pagingBar2,
        plugins: [/*new Ext.ux.grid.FilterRow(), */new Ext.ux.grid.GridHeaderFilters(), expander, action],        
        collapsible: false,//true,
        animCollapse: false,
        listeners: {
            /*load: {
                fn: function() {	
            		//alert("loaded");	        	
        			//console.log('load listener');
                    //Ext.getCmp('resultsheader').setValue("Sample data");
                }
            },*/
            render: {
				scope:this,
				fn: function(){
            		media_grid.getStore().load();
            		//alert("loaded");
            		//console.log('load listener1');
            		//console.log(media_grid.getStore());            		       	
        			//console.log('load listener2');
        			//$("#resultsheader").html("Search Results for: ");
        			//alert(media_grid.getStore());	 
				}
            }
    	},
        /*tbar: [search+': ', new Ext.app.SearchField({
            id: 'libsearch',
            store: media_store,
            paramName: 'keywords',
            width:380,
            autoWidth: true,
            emptyText:'Search for...',
            selectOnFocus:true,
            width: 380,
            resizable:false,
            hideClearButton: false,
        hideTrigger: false,
        typeAhead: true,
        //params: {start: 1,
        //        pagesize: 10,
        //        page: 1,
        //        rows: 10,
        //        sidx: 'id',
        //        sord: 'DESC' },
        triggerAction: 'all'
        }), '<span> '+searchResultsFor+': </span>', '<span id="resultsheader">&nbsp;</span>', '<span id="collectionheader">&nbsp;</span>'],
        */iconCls:'icon-grid'
});

/*action.on('action', function(grid, record) {
	console.log(grid);
	console.log(record);
}); */

Ext.QuickTips.init();

    // turn on validation errors beside the field globally
    Ext.form.Field.prototype.msgTarget = 'side';

    /*
var authorField = new Ext.form.TextField({ id: 'searchgrid-filter-editor-author' });
var issue_dateField = new Ext.form.DateField({
                        //fieldLabel: 'Date of Birth',
                        name: 'dob',
                        width:110,
			id: 'searchgrid-filter-editor-issue_date',
                        allowBlank:true
                    });
var titleField = new Ext.form.TextField({ id: 'searchgrid-filter-editor-title' });
var descriptionField = new Ext.form.TextField({ id: 'searchgrid-filter-editor-description' });
*/

////media_store.load();
//////media_grid.render();





var tpll = new Ext.XTemplate(
        '<div id="sample-ct">',
//            '<tpl for=".">',
            	'<div><h2><div unselectable="on">Search Description</div></h2>',
	            	'<dl>',
		                '<tpl for=".">',
		                    '<dd ext:url="{url}"><img title="{title}" type="{url}" class="{collection}" src="../../assets/images/cat/{collection}.jpg" alt="{title}"/>',
		                        '<div><h4>{author}</h4><p>{title}</p><p>{issue_date:date("M d Y")}</p></div>',
		                    '</dd>',
		                '</tpl>',
	            		'<div style="clear:left"></div>',
	            	'</dl>',
            	'</div>',
//            '</tpl>',
        '</div>'
    );

/*var tpll2 = new Ext.XTemplate(
        '<div id="sample-ct">',
            '<tpl for=".">',
            '<div><a name="{id}" id="{id}"></a><h2><div unselectable="on">Search Description</div></h2>',
            '<dl>',
                '<tpl for="searchResults">',
                    '<dd ext:url="{url}"><img title="{text}" src="../../assets/images/book.jpg"/>',
                        '<div><h4>{text}</h4><p>{desc}</p></div>',
                    '</dd>',
                '</tpl>',
            '<div style="clear:left"></div></dl></div>',
            '</tpl>',
        '</div>'
    );*/

//alert(tpll.applyTemplate(catalogg));

//tpll.overwrite(ctt, catalogg);

var dv = new Ext.DataView({
//title: 'Property Grid',
        store : media_store,
	tpl : tpll,
	singleSelect : true,
	//autoHeight:true,
        //multiSelect: true,
        //overClass:'x-view-over',
	emptyText: 'No items to display',

	prepareData: function(data){
            data.title = Ext.util.Format.ellipsis(data.title, 80);
            //data.sizeString = Ext.util.Format.fileSize(data.size);
            //data.dateString = data.lastmod.format("m/d/Y g:i a");
            return data;
        },
          
        listeners: {
		    selectionchange: {
	        	fn: function(dv,nodes){
	            		var l = nodes.length;
	            		var s = l != 1 ? 's' : '';
	            		////console.info(dv, nodes);
	            		//panel.setTitle('Simple DataView ('+l+' item'+s+' selected)');
	           	}
	        },
	        click:{
				fn: function(el, i, n, e){
					console.info(el, i, n, e);

					if(t = e.getTarget('dd', 5)){
			            var url = Ext.fly(t).getAttributeNS('ext', 'url');
						if(url){
							window.open(url.indexOf('http') === 0 ? url : ('/reports/frameset?__report=undesa.rptdesign&sample=my+parameter&__format=pdf&' + url +'='));
						}
			        }
					//Ext.Msg.alert('Clicked', el.dom[attr]);
				}
		    }
        },
        itemSelector : 'dd'        
    });
    
    var dp = new Ext.TabPanel({
//activeTab: 0,
//plain:true,
//header: false,
//border: false,
defaults:{autoScroll: true},

        title : 'Data View',
        //region : 'center',
        //layout : 'border',//'fit'
height: 510,
autoScroll:true,
activeTab: 0,
	renderTo : 'sample-box-inner',
deferredRender: false,
/*	emptyText: 'No items to display', */
bbar: pagingBar2,
tbar: [search+': ', new Ext.app.SearchField({
            id: 'libsearch',
            store: media_store,
            paramName: 'keywords',
            width:380,
            autoWidth: true,
            emptyText:'Search for...',
            selectOnFocus:true,
            //width: 380,
            resizable:false,
            hideClearButton: false,
        hideTrigger: false,
        typeAhead: true,
        //params: {start: 1,
        //        pagesize: 10,
        //        page: 1,
        //        rows: 10,
        //        sidx: 'id',
        //        sord: 'DESC' },
        triggerAction: 'all'
        }), '<span> '+searchResultsFor+': </span>', '<span id="resultsheader">&nbsp;</span>', '<span id="collectionheader">&nbsp;</span>'],
/*listeners : { 
									click : function(d, i, n, e) {
										Ext.getCmp(objParentPanel.id+"modIcon").setValue(n.id);
										chooserIcon.hide();
										//alert(n.id + objParentPanel.id); 
						                // myclick(i); 
									} 
								}
*/
        items : [{/*contentEl:'scripter', */title: 'Icon View', id: 'gd', items: [dv]/*html:'gfjhgjhjhjhjh'*/, autoScroll: true/*, items: [media_grid]*/}/*dv, media_grid*/,{/*contentEl:'scripter', */title: 'Grid View', id: 'gdd', items: [media_grid], autoScroll: true}]

    });
    dp.render();
// set the default sorting for the corresponding sql query
//media_store2.setDefaultSort('id', 'DESC');
//alert("ttttttttt");
/*media_store2.on('load',function(store){
	alert("hjgjjh");
	Ext.MessageBox.alert("val:"+Ext.util.JSON.encode(store.reader.jsonData));
	
});*/
///media_store2.load();






$(".x-grid3-td-numberer div:gt(0)").css("height", "1px");

</script>
</head>
<body></body>
</html>